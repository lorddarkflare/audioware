searchState.loadedDescShard("audioware_bank", 0, "Banks storage.\ne.g. dual dialog\nAny audio defined all by a CName, Locale and PlayerGender.\ne.g. ono\nAny audio defined by both a CName and a PlayerGender.\nSpecial type whose audio data is guaranteed to both exist …\nOutcome of Banks initialization.\nKey which can be either <code>Unique</code>, <code>Locale</code>, <code>Gender</code> or <code>Both</code> (…\ne.g. unique dialog\nAny audio defined by both a CName and a Locale.\nReturns raw entries to create a localization package.\nUsed with kira static sounds.\nUsed with kira streaming.\ne.g. sfx\nAny audio solely defined by its inner CName.\nSpecify on-demand Usage.\nIdentify potential conflicts between instances of same …\nRetrieves sound data for a given Id, including settings if …\nReturn audio duration (as seconds) if any, otherwise <code>-1.0</code>.\nGuarantees to uphold at all time, as explained in the book.\nBank errors.\nWhether audio ID exists in banks or not.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBank registry ids.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBank keys\nAll languages found in Manifests.\nInitialize banks.\nRetrieves sound settings for a given Id if any.\nBank storage for data and settings.\nAll subtitles stored in banks for a given written locale, …\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nSearch indexes for conflictual combination.\nIdentify a type as potentially conflictual.\nEnsure guarantees are upheld.\nEnsure Key variants do not Conflict with each others.\nEnsure CName does not already exist in game pool.\nEnsure CName does not already exist in game pool, unless …\nEnsure audio file Path is located inside Mod depot.\nEnsure Manifest does not contain duplicate keys among Sfx, …\nEnsure Music guarantees are upheld.\nEnsure no duplicate mod folder name across depots: …\nEnsure Ono guarantees are upheld.\nEnsure Sfx guarantees are upheld.\nEnsure data is properly stored.\nEnsure Id is properly indexed in appropriate bank.\nEnsure settings are properly stored.\nEnsure subtitle is properly stored.\nEnsure path refers to valid audio (based on usage).\nEnsure given settings are valid for audio.\nEnsure Voice guarantees are upheld.\nSNAFU context selector for the <code>Error::Manifest</code> variant\nSNAFU context selector for the <code>Error::Registry</code> variant\nSNAFU context selector for the <code>Error::Validation</code> variant\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nSNAFU context selector for the <code>Error::MissingSpokenLocale</code> …\nSNAFU context selector for the <code>Error::MissingWrittenLocale</code> …\nSNAFU context selector for the <code>Error::NotFound</code> variant\nSNAFU context selector for the <code>Error::RequireGender</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nSNAFU context selector for the <code>Error::AudioOutsideDepot</code> …\nSNAFU context selector for the <code>Error::CannotStoreAgnosticId</code>…\nSNAFU context selector for the <code>Error::CannotStoreData</code> …\nSNAFU context selector for the <code>Error::CannotStoreSettings</code> …\nSNAFU context selector for the <code>Error::CannotStoreSubtitle</code> …\nSNAFU context selector for the <code>Error::ConflictingKey</code> …\nSNAFU context selector for the <code>Error::DuplicateAcrossDepots</code>…\nSNAFU context selector for the <code>Error::IO</code> variant\nSNAFU context selector for the <code>Error::InvalidAudioCaption</code> …\nSNAFU context selector for the <code>Error::InvalidAudioID</code> …\nAn error occured while converting audio ID to CName.\nSNAFU context selector for the <code>Error::InvalidAudioSettings</code> …\nSNAFU context selector for the <code>Error::InvalidAudio</code> variant\nSNAFU context selector for the <code>Error::NonUniqueKey</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nConsumes <code>T</code>, absorbing its data if any.\nSpecial type whose audio data is guaranteed to both exist …\nUsed with kira static sounds.\nUsed with kira streaming.\nSpecify on-demand Usage.\ne.g. dual dialog\nAny audio defined all by a CName, Locale and PlayerGender.\ne.g. ono\nAny audio defined by both a CName and a PlayerGender.\nKey which can be either <code>Unique</code>, <code>Locale</code>, <code>Gender</code> or <code>Both</code> (…\ne.g. unique dialog\nAny audio defined by both a CName and a Locale.\ne.g. sfx\nAny audio solely defined by its inner CName.\nReturns raw entries to create a localization package.\nAll subtitles stored in banks for a given written locale, …")